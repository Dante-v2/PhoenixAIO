/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package fqrious/ghttp_c */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include "main.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "fetch_result.h"

#line 1 "cgo-generated-wrapper"

#line 3 "useless.go"

#include "main.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "fetch_result.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) char* get_fingerprints();
extern __declspec(dllexport) void start_signal_listener(void* cfunc);
extern __declspec(dllexport) void free_fetch_result(fetch_result f);
extern __declspec(dllexport) fetch_result node_fetch(GoUint32 clientPtr, GoString url, GoString headers, GoString method, GoString data);
extern __declspec(dllexport) void node_fetch_with_cb(GoUint32 clientPtr, GoString url, GoString headers, GoString method, GoString data, void* cfunc);
extern __declspec(dllexport) client new_client(GoString proxy, GoString fingerprint, GoUint8 fingertype, GoString settings, GoInt timeout, GoUint8 redirect, GoUint8 verify_ssl);
extern __declspec(dllexport) char* switch_proxy(GoUint32 clientPtr, GoString proxy, GoString fingerprint, GoUint8 fingertype, GoString settings, GoUint8 verify_ssl);
extern __declspec(dllexport) void delete_client(GoUint32 client);
extern __declspec(dllexport) GoString get_cookies(GoInt32 clientPtr, GoString url);
extern __declspec(dllexport) GoString set_cookies(GoInt32 clientPtr, GoString url, GoString cookies);

#ifdef __cplusplus
}
#endif
